git clone ssh://git@bitbucket.org/sdettmer/config config
cp -a config/.git ~/
# warning, check local changes etc
# Branches
# - master
# - steffen_win_master - Windows customizations
# - steffen_at_link    - customizations for steffen@link (private)
git config --global push.default simple
git config --global user.name "Steffen Dettmer"
git config --global user.email "steffen.dettmer@gmail.com"
git config user.name "Steffen Dettmer"
git config user.email "steffen.dettmer@gmail.com"
git config user.email "steffen@dett.de"
git config --global color.ui auto
git config --global merge.conflictstyle diff3
#  undo: git config --global merge.conflictstyle merge
git config --global rebase.autosquash true
# With GIT 1.8, test rebase.autostash true
# With GIT 2.0, test pull.ff true


# to avoid "git reset --hard HEAD^" after unwanted merge
# ? git config --global alias.pl 'pull --ff-only'
# ? git config --global branch.autosetup.merge false
# or just get used to use git fetch or get used to type "git pull --ff-only"


# Repos
# url = ssh://git@bitbucket.org/sdettmer/config
# url = git://github.com/sdettmer/config.git
# In case of emergency: git config http.sslVerify false
# Otherwise: Download certificates
wget http://curl.haxx.se/ca/cacert.pem -O ~/mozilla-cacert.pem
git config --global http.sslCAinfo ~/mozilla-cacert.pem

# Merge messages
# git log --pretty=format:'%s (%ad)%n%b' --date=local ORIG_HEAD..MERGE_HEAD


# push a new branch upstream:
git push -u origin mybranch
# Forcing options incl. "+" to bypass ff-check (not for shared repos):
git push --force origin +mymaster:remotemaster

# Windows Putty Agent with Cygwin SSH: http://cuviper.github.com/ssh-pageant/
# (copy .exe to a folder that is in PATH, e.g. C:\cygwin\usr\local\bin)

# see branch topology
git log --graph --oneline --branches --decorate --simplify-by-decoration

# ignore file modes (e.g. Windows/FAT...)
git config core.filemode false
git config --global core.filemode false
# ignore untracked
git config status.showuntrackedfiles no
# Show ignored files in current directory, recursively
git ls-files --others --ignored --exclude-standard
git clean -ndX
# Show unknown/untracked files (including ignored files) in cwd, recursively
git ls-files --other


------------------------------------------------------------------->8=======
COOKBOOK


I moved notes.txt from another GIT repo. I did not want to keep
"the history", because this included many empty commits (done
with other files in the original repository), but I wanted only
changes of notes.txt. So I created patches:

  $ git format-patch eb2bba11e2b -o tmpdir2

the selected only the patchs for notes.txt:

  $ mkdir tmpdir2 ; cd tmpdir2
  $ cp -a `grep -l '^--- a/notes.txt' ../tmpdir1/*` .

checked that no other files were included in the patches:

  $ grep "^--- " *|grep -v notes.txt

and grouped this to one patch

  $ cat * > all

to be applied in the other repository:

  $ git am <path>/all

(before, I checked in empty notes.txt and had to apply the first
patch by hand (patch < .git/rebase-apply/patch) and continue with
the commands "git add notes.txt" and "git am --resolved")

=======8<-------------------------------------------------------------------

Creating an upstream

  $ cd ~/repos
  $ mkdir myproj.git
  $ chmod g+ws myproj.git
  $ cd myproj.git
  $ git init --bare --shared
  $ cd ~/work/myproj
  $ git remote add origin ~/repos/myproj.git
  $ git push --set-upstream origin master
  $ git push -u origin --all
  # don't use --mirror, it pushes remotes and may delete remote things!
  $ git push origin --tags

------------------------------------------------------------------->8=======

Remote tags by default

Usually pushing tags by default isn't a good idea, it makes them
`global' and breaks things (simple example: two people using the
same tag name). For branches, someone has to manually map them on
remotes; the same could be considered for tags, but when having
this as a manual operation anyway, there is no point of fetching
them automatically.
However, for small repository structures or when using "private
upstreams" to synchronize things, sometimes it could be useful to
push tags and fetch tags automatically.

  [remote "origin"]
  push = +refs/tags/*:refs/tags/*    # add this line to proper section

  $ git config remote.origin.tagopt --tags

For notes it is more complicated. Althrough having notes in a
shared repository is hard to maintain (for example, no merge
support and complex manual work needed), it might be suited for
"private upstreams" as well. To automate the manual way:

 $ git push origin refs/notes/*
 $ git fetch origin refs/notes/*:refs/notes/*

Someone could use:

 [remote "origin"]
   fetch = +refs/notes/*:refs/notes/*   # add this line in proper section

=======8<-------------------------------------------------------------------

master remotes
Note: when working in different branches, direct sync works
without upstream (otherwise, refused to overwrite checked out
branch because would make work tree and index dirty)
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	; url = https://sdettmer@bitbucket.org/sdettmer/config
	url = ssh://git@bitbucket.org/sdettmer/config
[remote "github"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	url = ssh://git@github.com/sdettmer/config.git

------------------------------------------------------------------->8=======

GIT SVN

  $ git svn clone <url> <destdir>
  $ cd <destdir>
  $ git commit ...        # Work and commit the changes.
  $ git stash             # Avoiding git-svn refusing "risky" actions.
  $ git svn rebase        # Fetch and rebase updates from SVN.
  $ git rebase -i git-svn # Arrange commits to be pushed to SVN to be at top.
  $ git log               # !! Find out ID of the last commit to be pushed !!
  $ git svn dcommit <ID>  # Commit up to given ID.
  $ git svn rebase
  $ git stash pop         # Get back working state.

=======8<-------------------------------------------------------------------

Adding "file-based history" retrospectively:

  $ cp -a file.bak file.txt
  $ git commit "--date=`date -u -r file.txt`" file.txt
  $ cp -a file.bak2 file.txt
  $ git commit "--date=`date -u -r file.txt`" file.txt

------------------------------------------------------------------->8=======

Find lost commits (including dropped stashes):

  $ gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )

=======8<-------------------------------------------------------------------

Search for youngest commit with message matching regex:

 $ git log :/<regex>                     e.g. $ git log ":/bug fix"

Sometimes "git gc" does not run because of lack of disk space and prune helps:

 $ git prune --expire=2.weeks.ago

If it failed once, it may help to remove stale tmp files (untested):

 $ rm .git/objects/ca/tmp_obj_* .git/objects/pack/tmp_pack_*

------------------------------------------------------------------->8=======

Retrospectively overwrite all author / commiter fields by rewriting:

git filter-branch --commit-filter '
  if [ "$GIT_AUTHOR_NAME" = "root" ];
    GIT_AUTHOR_NAME="Steffen Dettmer" ; 
    GIT_AUTHOR_EMAIL="steffen.dettmer@de.transport.bombardier.com" ;
    GIT_COMMITTER_NAME="Steffen Dettmer" ;
    GIT_COMMITTER_EMAIL="steffen.dettmer@de.transport.bombardier.com" ; 
  fi ;
  git commit-tree "$@"'

